### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Mutation {
  createOneRecipe(data: RecipeCreateInput!): Recipe!
  deleteOneRecipe(where: RecipeWhereUniqueInput!): Recipe
  updateOneRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipes(after: RecipeWhereUniqueInput, before: RecipeWhereUniqueInput, first: Int, last: Int, orderBy: [RecipeOrderByInput!], where: RecipeWhereInput): [Recipe!]!
}

enum QueryMode {
  default
  insensitive
}

type Recipe {
  body: String!
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input RecipeCreateInput {
  body: String!
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input RecipeOrderByInput {
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input RecipeUpdateInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RecipeWhereInput {
  AND: [RecipeWhereInput!]
  body: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  title: StringFilter
  updatedAt: DateTimeFilter
}

input RecipeWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
